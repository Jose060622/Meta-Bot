// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginTelemetryReporter = void 0;
/**
 *  Proxy of telemetry reporter to enhance reporter for plugins with some plugin-common ability in the way plugins are not aware of it.
 */
class PluginTelemetryReporter {
    constructor(reporter, pluginName) {
        this.reporter = reporter;
        this.pluginName = pluginName;
    }
    sendTelemetryEvent(eventName, properties = {}, measurements) {
        this.addPluginProps(properties);
        this.reporter.sendTelemetryEvent(this.pluginify(eventName), properties, measurements);
    }
    sendTelemetryErrorEvent(eventName, properties = {}, measurements, errorProps) {
        this.addPluginProps(properties);
        this.reporter.sendTelemetryErrorEvent(this.pluginify(eventName), properties, measurements, errorProps);
    }
    sendTelemetryException(error, properties = {}, measurements) {
        this.addPluginProps(properties);
        this.reporter.sendTelemetryException(error, properties, measurements);
    }
    addPluginProps(properties) {
        properties.pluginName = this.pluginName;
    }
    pluginify(eventName) {
        return this.pluginName + "-" + eventName;
    }
}
exports.PluginTelemetryReporter = PluginTelemetryReporter;
//# sourceMappingURL=telemetry.js.map