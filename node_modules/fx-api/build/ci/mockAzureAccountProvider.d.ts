import { TokenCredential } from "@azure/core-http";
import { TokenCredentialsBase } from "@azure/ms-rest-nodeauth";
import { AzureAccountProvider, SubscriptionInfo } from "../utils/login";
export declare class MockAzureAccountProvider implements AzureAccountProvider {
    static tokenCredentialsBase: TokenCredentialsBase;
    static tokenCredential: TokenCredential;
    private client?;
    private static instance;
    /**
     * Gets instance
     * @returns instance
     */
    static getInstance(): MockAzureAccountProvider;
    /**
     * Get ms-rest-* [credential](https://github.com/Azure/ms-rest-nodeauth/blob/master/lib/credentials/tokenCredentialsBase.ts)
     */
    getAccountCredential(): TokenCredentialsBase | undefined;
    /**
     * Get identity [crendential](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/core/core-auth/src/tokenCredential.ts)
     */
    getIdentityCredential(): TokenCredential | undefined;
    getAccountCredentialAsync(): Promise<TokenCredentialsBase | undefined>;
    getIdentityCredentialAsync(): Promise<TokenCredential | undefined>;
    signout(): Promise<boolean>;
    setStatusChangeCallback(statusChange: (status: string, token?: string, accountInfo?: Record<string, unknown>) => Promise<void>): Promise<boolean>;
    deleteResourceGroup(rg: string): Promise<void>;
    setStatusChangeMap(name: string, statusChange: (status: string, token?: string, accountInfo?: Record<string, unknown>) => Promise<void>): Promise<boolean>;
    removeStatusChangeMap(name: string): Promise<boolean>;
    getJsonObject(showDialog?: boolean): Promise<Record<string, unknown> | undefined>;
    listSubscriptions(): Promise<SubscriptionInfo[]>;
    setSubscription(subscriptionId: string): Promise<void>;
}
export declare type AzureSubscription = {
    displayName: string;
    subscriptionId: string;
};
declare const _default: MockAzureAccountProvider;
export default _default;
//# sourceMappingURL=mockAzureAccountProvider.d.ts.map