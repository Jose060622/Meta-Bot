// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadValidator = void 0;
const tslib_1 = require("tslib");
const chai = tslib_1.__importStar(require("chai"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const mockAppStudioTokenProvider_1 = tslib_1.__importDefault(require("./mockAppStudioTokenProvider"));
const aadPluginName = "fx-resource-aad-app-for-teams";
const baseUrl = "https://dev.teams.microsoft.com/api/aadapp/v2";
function delay(ms) {
    // tslint:disable-next-line no-string-based-set-timeout
    return new Promise((resolve) => setTimeout(resolve, ms));
}
class AadValidator {
    static init(ctx, isLocalDebug = false, provider) {
        console.log("Start to init validator for Azure AD app.");
        AadValidator.provider = provider || mockAppStudioTokenProvider_1.default;
        const aadObject = AadValidator.parseConfig(ctx[aadPluginName], isLocalDebug);
        chai.assert.exists(aadObject);
        console.log("Successfully init validator for Azure AD app.");
        return aadObject;
    }
    static async validate(aadObject, expectedPermission) {
        var _a;
        console.log("Start to validate Azure AD app.");
        const groundTruth = await AadValidator.getAadApp(aadObject.objectId);
        chai.assert.exists(groundTruth);
        chai.assert(aadObject.clientId, groundTruth === null || groundTruth === void 0 ? void 0 : groundTruth.appId);
        chai.assert(aadObject.oauth2PermissionScopeId, (_a = groundTruth === null || groundTruth === void 0 ? void 0 : groundTruth.api) === null || _a === void 0 ? void 0 : _a.oauth2PermissionScopes[0].id);
        chai.assert(aadObject.applicationIdUris, groundTruth === null || groundTruth === void 0 ? void 0 : groundTruth.identifierUris[0]);
        if (expectedPermission) {
            console.log("Start to validate permission for Azure AD app.");
            chai.assert(expectedPermission, JSON.stringify(groundTruth === null || groundTruth === void 0 ? void 0 : groundTruth.requiredResourceAccess));
        }
        console.log("Successfully validate Azure AD app.");
    }
    static parseConfig(aad, isLocalDebug) {
        if (!isLocalDebug) {
            return aad;
        }
        else {
            const localObject = aad;
            return AadValidator.objectTransform(localObject);
        }
    }
    static async getAadApp(objectId) {
        const token = await this.provider.getAccessToken();
        let retries = 10;
        while (retries > 0) {
            try {
                retries = retries - 1;
                axios_1.default.defaults.headers.common["Authorization"] = `Bearer ${token}`;
                const aadGetResponse = await axios_1.default.get(`${baseUrl}/${objectId}`);
                if (aadGetResponse && aadGetResponse.data && aadGetResponse.data["identifierUris"][0]) {
                    return aadGetResponse.data;
                }
            }
            catch (error) {
                console.log("Azure AD app get failed. Retry.");
            }
            await delay(10000);
        }
        return undefined;
    }
    static objectTransform(localObject) {
        return {
            clientId: localObject.local_clientId,
            clientSecret: localObject.local_clientSecret,
            objectId: localObject.local_objectId,
            oauth2PermissionScopeId: localObject.local_oauth2PermissionScopeId,
            applicationIdUris: localObject.local_applicationIdUris,
            oauthAuthority: localObject.oauthAuthority,
            teamsMobileDesktopAppId: localObject.teamsMobileDesktopAppId,
            teamsWebAppId: localObject.teamsWebAppId
        };
    }
}
exports.AadValidator = AadValidator;
//# sourceMappingURL=aadValidate.js.map