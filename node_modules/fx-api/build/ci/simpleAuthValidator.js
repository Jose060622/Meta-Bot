"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleAuthValidator = exports.PropertiesKeys = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const chai = tslib_1.__importStar(require("chai"));
const mockAzureAccountProvider_1 = require("./mockAzureAccountProvider");
const simpleAuthPluginName = "fx-resource-simple-auth";
const solutionPluginName = "solution";
const subscriptionKey = "subscriptionId";
const rgKey = "resourceGroupName";
const baseUrlAppSettings = (subscriptionId, rg, name) => `https://management.azure.com/subscriptions/${subscriptionId}/resourceGroups/${rg}/providers/Microsoft.Web/sites/${name}/config/appsettings/list?api-version=2019-08-01`;
const baseUrlPlan = (subscriptionId, rg, name) => `https://management.azure.com/subscriptions/${subscriptionId}/resourceGroups/${rg}/providers/Microsoft.Web/serverfarms/${name}?api-version=2019-08-01`;
class PropertiesKeys {
}
exports.PropertiesKeys = PropertiesKeys;
PropertiesKeys.clientId = "CLIENT_ID";
PropertiesKeys.clientSecret = "CLIENT_SECRET";
PropertiesKeys.oauthAuthority = "OAUTH_AUTHORITY";
PropertiesKeys.identifierUri = "IDENTIFIER_URI";
PropertiesKeys.aadMetadataAddreass = "AAD_METADATA_ADDRESS";
class SimpleAuthValidator {
    static init(ctx, isLocalDebug = false) {
        console.log("Start to init validator for Simple Auth.");
        let simpleAuthObject;
        if (!isLocalDebug) {
            simpleAuthObject = ctx[simpleAuthPluginName];
        }
        else {
            simpleAuthObject = {
                endpoint: ctx[simpleAuthPluginName]["endpoint"]
            };
        }
        chai.assert.exists(simpleAuthObject);
        this.subscriptionId = ctx[solutionPluginName][subscriptionKey];
        chai.assert.exists(this.subscriptionId);
        this.rg = ctx[solutionPluginName][rgKey];
        chai.assert.exists(this.rg);
        console.log("Successfully init validator for Simple Auth.");
        return simpleAuthObject;
    }
    static async validate(simpleAuthObject, aadObject, servicePlan = "B1") {
        var _a;
        console.log("Start to validate Simple Auth.");
        const resourceName = simpleAuthObject.endpoint.slice(8, -18);
        chai.assert.exists(resourceName);
        const tokenProvider = mockAzureAccountProvider_1.MockAzureAccountProvider.getInstance();
        const tokenCredential = await tokenProvider.getAccountCredentialAsync();
        const token = (_a = (await (tokenCredential === null || tokenCredential === void 0 ? void 0 : tokenCredential.getToken()))) === null || _a === void 0 ? void 0 : _a.accessToken;
        console.log("Validating app settings.");
        const response = await this.getWebappConfigs(this.subscriptionId, this.rg, resourceName, token);
        chai.assert.exists(response);
        chai.assert.equal(aadObject.clientId, response[PropertiesKeys.clientId]);
        // chai.assert.equal(aadObject.clientSecret, response[PropertiesKeys.clientSecret]);
        chai.assert.equal(aadObject.applicationIdUris, response[PropertiesKeys.identifierUri]);
        chai.assert.equal(aadObject.oauthAuthority, response[PropertiesKeys.oauthAuthority]);
        chai.assert.equal(`${aadObject.oauthAuthority}/v2.0/.well-known/openid-configuration`, response[PropertiesKeys.aadMetadataAddreass]);
        console.log("Validating app service plan.");
        const serivcePlanResponse = await this.getWebappServicePlan(this.subscriptionId, this.rg, resourceName, token);
        chai.assert(serivcePlanResponse, servicePlan);
        console.log("Successfully validate Simple Auth.");
    }
    static async getWebappConfigs(subscriptionId, rg, name, token) {
        try {
            axios_1.default.defaults.headers.common["Authorization"] = `Bearer ${token}`;
            const simpleAuthGetResponse = await axios_1.default.post(baseUrlAppSettings(subscriptionId, rg, name));
            if (!simpleAuthGetResponse || !simpleAuthGetResponse.data || !simpleAuthGetResponse.data.properties) {
                return undefined;
            }
            return simpleAuthGetResponse.data.properties;
        }
        catch (error) {
            console.log(error);
            return undefined;
        }
    }
    static async getWebappServicePlan(subscriptionId, rg, name, token) {
        try {
            axios_1.default.defaults.headers.common["Authorization"] = `Bearer ${token}`;
            const simpleAuthPlanResponse = await axios_1.default.get(baseUrlPlan(subscriptionId, rg, name));
            if (!simpleAuthPlanResponse || !simpleAuthPlanResponse.data || !simpleAuthPlanResponse.data.sku || !simpleAuthPlanResponse.data.sku.name) {
                return undefined;
            }
            return simpleAuthPlanResponse.data.sku.name;
        }
        catch (error) {
            console.log(error);
            return undefined;
        }
    }
}
exports.SimpleAuthValidator = SimpleAuthValidator;
//# sourceMappingURL=simpleAuthValidator.js.map