"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionValidator = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const chai = tslib_1.__importStar(require("chai"));
const mockAzureAccountProvider_1 = require("./mockAzureAccountProvider");
const baseUrlAppSettings = (subscriptionId, rg, name) => `https://management.azure.com/subscriptions/${subscriptionId}/resourceGroups/${rg}/providers/Microsoft.Web/sites/${name}/config/appsettings/list?api-version=2019-08-01`;
const baseUrlPlan = (subscriptionId, rg, name) => `https://management.azure.com/subscriptions/${subscriptionId}/resourceGroups/${rg}/providers/Microsoft.Web/serverfarms/${name}?api-version=2019-08-01`;
const baseUrlListDeployments = (subscriptionId, rg, name) => `https://management.azure.com/subscriptions/${subscriptionId}/resourceGroups/${rg}/providers/Microsoft.Web/sites/${name}/deployments?api-version=2019-08-01`;
const baseUrlListDeploymentLogs = (subscriptionId, rg, name, id) => `https://management.azure.com/subscriptions/${subscriptionId}/resourceGroups/${rg}/providers/Microsoft.Web/sites/${name}/deployments/${id}/log?api-version=2019-08-01`;
var BaseConfig;
(function (BaseConfig) {
    BaseConfig["M365_CLIENT_ID"] = "M365_CLIENT_ID";
    BaseConfig["M365_CLIENT_SECRET"] = "M365_CLIENT_SECRET";
    BaseConfig["M365_AUTHORITY_HOST"] = "M365_AUTHORITY_HOST";
    BaseConfig["M365_TENANT_ID"] = "M365_TENANT_ID";
    BaseConfig["ALLOWED_APP_IDS"] = "ALLOWED_APP_IDS";
    BaseConfig["API_ENDPOINT"] = "API_ENDPOINT";
    BaseConfig["M365_APPLICATION_ID_URI"] = "M365_APPLICATION_ID_URI";
})(BaseConfig || (BaseConfig = {}));
var SQLConfig;
(function (SQLConfig) {
    SQLConfig["IDENTITY_ID"] = "IDENTITY_ID";
    SQLConfig["SQL_DATABASE_NAME"] = "SQL_DATABASE_NAME";
    SQLConfig["SQL_ENDPOINT"] = "SQL_ENDPOINT";
})(SQLConfig || (SQLConfig = {}));
class DependentPluginInfo {
}
DependentPluginInfo.functionPluginName = "fx-resource-function";
DependentPluginInfo.apiEndpoint = "functionEndpoint";
DependentPluginInfo.solutionPluginName = "solution";
DependentPluginInfo.resourceGroupName = "resourceGroupName";
DependentPluginInfo.subscriptionId = "subscriptionId";
DependentPluginInfo.resourceNameSuffix = "resourceNameSuffix";
DependentPluginInfo.location = "location";
DependentPluginInfo.programmingLanguage = "programmingLanguage";
DependentPluginInfo.aadPluginName = "fx-resource-aad-app-for-teams";
DependentPluginInfo.aadClientId = "clientId";
DependentPluginInfo.aadClientSecret = "clientSecret";
DependentPluginInfo.oauthHost = "oauthHost";
DependentPluginInfo.tenantId = "tenantId";
DependentPluginInfo.applicationIdUris = "applicationIdUris";
DependentPluginInfo.sqlPluginName = "fx-resource-azure-sql";
DependentPluginInfo.databaseName = "databaseName";
DependentPluginInfo.sqlEndpoint = "sqlEndpoint";
DependentPluginInfo.identityPluginName = "fx-resource-identity";
DependentPluginInfo.identityId = "identityId";
DependentPluginInfo.identityName = "identityName";
DependentPluginInfo.frontendPluginName = "fx-resource-frontend-hosting";
DependentPluginInfo.frontendEndpoint = "endpoint";
DependentPluginInfo.frontendDomain = "domain";
DependentPluginInfo.apimPluginName = "fx-resource-apim";
DependentPluginInfo.apimAppId = "apimClientAADClientId";
class FunctionValidator {
    static init(ctx) {
        console.log("Start to init validator for Function.");
        const functionObject = ctx[DependentPluginInfo.functionPluginName];
        chai.assert.exists(functionObject);
        this.subscriptionId = ctx[DependentPluginInfo.solutionPluginName][DependentPluginInfo.subscriptionId];
        chai.assert.exists(this.subscriptionId);
        this.rg = ctx[DependentPluginInfo.solutionPluginName][DependentPluginInfo.resourceGroupName];
        chai.assert.exists(this.rg);
        const expectValues = new Map([]);
        expectValues.set(BaseConfig.API_ENDPOINT, ctx[DependentPluginInfo.functionPluginName][DependentPluginInfo.apiEndpoint]);
        expectValues.set(SQLConfig.SQL_ENDPOINT, ctx[DependentPluginInfo.sqlPluginName][DependentPluginInfo.sqlEndpoint]);
        functionObject.expectValues = expectValues;
        console.log("Successfully init validator for Function.");
        return functionObject;
    }
    static async validateProvision(functionObject, sqlEnabled = true) {
        var _a;
        console.log("Start to validate Function Provision.");
        const tokenProvider = mockAzureAccountProvider_1.MockAzureAccountProvider.getInstance();
        const tokenCredential = await tokenProvider.getAccountCredentialAsync();
        const token = (_a = (await (tokenCredential === null || tokenCredential === void 0 ? void 0 : tokenCredential.getToken()))) === null || _a === void 0 ? void 0 : _a.accessToken;
        let BaseConfig;
        (function (BaseConfig) {
            BaseConfig["M365_CLIENT_ID"] = "M365_CLIENT_ID";
            BaseConfig["M365_CLIENT_SECRET"] = "M365_CLIENT_SECRET";
            BaseConfig["M365_AUTHORITY_HOST"] = "M365_AUTHORITY_HOST";
            BaseConfig["M365_TENANT_ID"] = "M365_TENANT_ID";
            BaseConfig["ALLOWED_APP_IDS"] = "ALLOWED_APP_IDS";
            BaseConfig["API_ENDPOINT"] = "API_ENDPOINT";
            BaseConfig["M365_APPLICATION_ID_URI"] = "M365_APPLICATION_ID_URI";
        })(BaseConfig || (BaseConfig = {}));
        let SQLConfig;
        (function (SQLConfig) {
            SQLConfig["IDENTITY_ID"] = "IDENTITY_ID";
            SQLConfig["SQL_DATABASE_NAME"] = "SQL_DATABASE_NAME";
            SQLConfig["SQL_ENDPOINT"] = "SQL_ENDPOINT";
        })(SQLConfig || (SQLConfig = {}));
        console.log("Validating app settings.");
        const response = await this.getWebappConfigs(this.subscriptionId, this.rg, functionObject.functionAppName, token);
        chai.assert.exists(response);
        Object.values(BaseConfig).forEach((v) => {
            chai.assert.exists(response[v]);
            if (functionObject.expectValues.get(v)) {
                chai.assert.equal(functionObject.expectValues.get(v), response[v]);
            }
        });
        if (sqlEnabled) {
            Object.values(SQLConfig).forEach((v) => {
                chai.assert.exists(response[v]);
                if (functionObject.expectValues.get(v)) {
                    chai.assert.equal(functionObject.expectValues.get(v), response[v]);
                }
            });
        }
        console.log("Validating app service plan.");
        const servicePlanResponse = await this.getWebappServicePlan(this.subscriptionId, this.rg, functionObject.appServicePlanName, token);
        chai.assert(servicePlanResponse, functionObject.appServicePlanName);
        console.log("Successfully validate Function Provision.");
    }
    static async validateDeploy(functionObject) {
        var _a, _b, _c;
        console.log("Start to validate Function Deployment.");
        const tokenProvider = mockAzureAccountProvider_1.MockAzureAccountProvider.getInstance();
        const tokenCredential = await tokenProvider.getAccountCredentialAsync();
        const token = (_a = (await (tokenCredential === null || tokenCredential === void 0 ? void 0 : tokenCredential.getToken()))) === null || _a === void 0 ? void 0 : _a.accessToken;
        const deployments = await this.getDeployments(this.subscriptionId, this.rg, functionObject.functionAppName, token);
        const deploymentId = (_c = (_b = deployments === null || deployments === void 0 ? void 0 : deployments[0]) === null || _b === void 0 ? void 0 : _b.properties) === null || _c === void 0 ? void 0 : _c.id;
        const deploymentLog = await this.getDeploymentLog(this.subscriptionId, this.rg, functionObject.functionAppName, token, deploymentId);
        chai.assert.exists(deploymentLog === null || deploymentLog === void 0 ? void 0 : deploymentLog.find((item) => item.properties.message === "Deployment successful."));
        console.log("Successfully validate Function Deployment.");
    }
    static async getDeployments(subscriptionId, rg, name, token) {
        var _a;
        try {
            axios_1.default.defaults.headers.common["Authorization"] = `Bearer ${token}`;
            const functionGetResponse = await axios_1.default.get(baseUrlListDeployments(subscriptionId, rg, name));
            return (_a = functionGetResponse === null || functionGetResponse === void 0 ? void 0 : functionGetResponse.data) === null || _a === void 0 ? void 0 : _a.value;
        }
        catch (error) {
            console.log(error);
            return undefined;
        }
    }
    static async getDeploymentLog(subscriptionId, rg, name, token, id) {
        var _a;
        try {
            axios_1.default.defaults.headers.common["Authorization"] = `Bearer ${token}`;
            const functionGetResponse = await axios_1.default.get(baseUrlListDeploymentLogs(subscriptionId, rg, name, id));
            return (_a = functionGetResponse === null || functionGetResponse === void 0 ? void 0 : functionGetResponse.data) === null || _a === void 0 ? void 0 : _a.value;
        }
        catch (error) {
            console.log(error);
            return undefined;
        }
    }
    static async getWebappConfigs(subscriptionId, rg, name, token) {
        try {
            axios_1.default.defaults.headers.common["Authorization"] = `Bearer ${token}`;
            const functionGetResponse = await axios_1.default.post(baseUrlAppSettings(subscriptionId, rg, name));
            if (!functionGetResponse || !functionGetResponse.data || !functionGetResponse.data.properties) {
                return undefined;
            }
            return functionGetResponse.data.properties;
        }
        catch (error) {
            console.log(error);
            return undefined;
        }
    }
    static async getWebappServicePlan(subscriptionId, rg, name, token) {
        try {
            axios_1.default.defaults.headers.common["Authorization"] = `Bearer ${token}`;
            const functionPlanResponse = await axios_1.default.get(baseUrlPlan(subscriptionId, rg, name));
            if (!functionPlanResponse || !functionPlanResponse.data || !functionPlanResponse.data.sku || !functionPlanResponse.data.sku.name) {
                return undefined;
            }
            return functionPlanResponse.data.sku.name;
        }
        catch (error) {
            console.log(error);
            return undefined;
        }
    }
}
exports.FunctionValidator = FunctionValidator;
//# sourceMappingURL=functionValidator.js.map