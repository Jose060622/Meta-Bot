// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockAppStudioTokenProvider = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const dotenv_1 = tslib_1.__importDefault(require("dotenv"));
const querystring_1 = tslib_1.__importDefault(require("querystring"));
const azureConfig = tslib_1.__importStar(require("./conf/azure"));
dotenv_1.default.config();
const user = (_a = process.env.TEST_USER_NAME) !== null && _a !== void 0 ? _a : "";
const password = (_b = process.env.TEST_USER_PASSWORD) !== null && _b !== void 0 ? _b : "";
class MockAppStudioTokenProvider {
    static getInstance() {
        if (!MockAppStudioTokenProvider.instance) {
            MockAppStudioTokenProvider.instance = new MockAppStudioTokenProvider();
        }
        return MockAppStudioTokenProvider.instance;
    }
    /**
     * Get team access token
     */
    async getAccessToken(showDialog = true) {
        const data = querystring_1.default.stringify({
            client_id: azureConfig.client_id,
            scope: "https://dev.teams.microsoft.com/AppDefinitions.ReadWrite",
            username: user,
            password: password,
            grant_type: "password",
        });
        const config = {
            method: "post",
            url: `https://login.microsoftonline.com/${azureConfig.tenant.id}/oauth2/v2.0/token`,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                Cookie: "fpc=AmzaQu9yHbpLtMD2LmHazdRCGxwGAQAAAIW47NcOAAAA; x-ms-gateway-slice=estsfd; stsservicecookie=estsfd",
            },
            data: data,
        };
        await axios_1.default(config)
            .then((r) => {
            MockAppStudioTokenProvider.accessToken = r.data.access_token;
        })
            .catch((e) => {
            console.log(e);
        });
        return MockAppStudioTokenProvider.accessToken;
    }
    async getJsonObject(showDialog) {
        const token = await this.getAccessToken(showDialog);
        if (token) {
            const array = token.split(".");
            const buff = Buffer.from(array[1], "base64");
            return new Promise((resolve) => {
                resolve(JSON.parse(buff.toString("utf-8")));
            });
        }
        else {
            return new Promise(resolve => {
                resolve(undefined);
            });
        }
    }
    async signout() {
        return new Promise((resolve) => {
            resolve(true);
        });
    }
    async setStatusChangeCallback(statusChange) {
        return new Promise((resolve) => {
            resolve(true);
        });
    }
    setStatusChangeMap(name, statusChange) {
        throw new Error("Method not implemented.");
    }
    removeStatusChangeMap(name) {
        throw new Error("Method not implemented.");
    }
}
exports.MockAppStudioTokenProvider = MockAppStudioTokenProvider;
exports.default = MockAppStudioTokenProvider.getInstance();
//# sourceMappingURL=mockAppStudioTokenProvider.js.map