// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockGraphTokenProvider = void 0;
const tslib_1 = require("tslib");
const dotenv_1 = tslib_1.__importDefault(require("dotenv"));
const msal = tslib_1.__importStar(require("@azure/msal-node"));
const azureConfig = tslib_1.__importStar(require("./conf/azure"));
dotenv_1.default.config();
const user = (_a = process.env.TEST_USER_NAME) !== null && _a !== void 0 ? _a : "";
const password = (_b = process.env.TEST_USER_PASSWORD) !== null && _b !== void 0 ? _b : "";
const msalConfig = {
    auth: {
        clientId: azureConfig.client_id,
        authority: `https://login.microsoftonline.com/${azureConfig.tenant.id}`,
    },
};
const scopes = ["https://graph.microsoft.com/.default"];
class MockGraphTokenProvider {
    /**
     * Gets instance
     * @returns instance
     */
    static getInstance() {
        if (!MockGraphTokenProvider.instance) {
            MockGraphTokenProvider.instance = new MockGraphTokenProvider();
        }
        return MockGraphTokenProvider.instance;
    }
    async getAccessToken() {
        const pca = new msal.PublicClientApplication(msalConfig);
        const usernamePasswordRequest = {
            scopes: scopes,
            username: user,
            password: password,
        };
        await pca
            .acquireTokenByUsernamePassword(usernamePasswordRequest)
            .then((response) => {
            MockGraphTokenProvider.accessToken = response.accessToken;
        })
            .catch((e) => {
            console.log(e);
        });
        return MockGraphTokenProvider.accessToken;
    }
    async getJsonObject(showDialog = true) {
        const token = await this.getAccessToken();
        if (token) {
            const array = token.split(".");
            const buff = Buffer.from(array[1], "base64");
            return new Promise((resolve) => {
                resolve(JSON.parse(buff.toString("utf-8")));
            });
        }
        else {
            return new Promise((resolve) => {
                resolve(undefined);
            });
        }
    }
    async signout() {
        return new Promise((resolve) => {
            resolve(true);
        });
    }
    async setStatusChangeCallback(statusChange) {
        return new Promise((resolve) => {
            resolve(true);
        });
    }
    setStatusChangeMap(name, statusChange) {
        throw new Error("Method not implemented.");
    }
    removeStatusChangeMap(name) {
        throw new Error("Method not implemented.");
    }
}
exports.MockGraphTokenProvider = MockGraphTokenProvider;
exports.default = MockGraphTokenProvider.getInstance();
//# sourceMappingURL=mockGraphTokenProvider.js.map