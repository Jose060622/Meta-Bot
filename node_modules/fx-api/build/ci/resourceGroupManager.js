// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceGroupManager = void 0;
const tslib_1 = require("tslib");
const arm = tslib_1.__importStar(require("azure-arm-resource"));
const msRestAzure = tslib_1.__importStar(require("ms-rest-azure"));
const azureConfig = tslib_1.__importStar(require("./conf/azure"));
const user = (_a = process.env.TEST_USER_NAME) !== null && _a !== void 0 ? _a : "";
const password = (_b = process.env.TEST_USER_PASSWORD) !== null && _b !== void 0 ? _b : "";
const subscriptionId = azureConfig.subscription.id;
function delay(ms) {
    // tslint:disable-next-line no-string-based-set-timeout
    return new Promise((resolve) => setTimeout(resolve, ms));
}
class ResourceGroupManager {
    constructor() {
        ResourceGroupManager.client = undefined;
    }
    static async init() {
        if (!ResourceGroupManager.instance) {
            ResourceGroupManager.instance = new ResourceGroupManager();
            const c = await msRestAzure.loginWithUsernamePassword(user, password);
            ResourceGroupManager.client = new arm.ResourceManagementClient(c, subscriptionId);
        }
        return Promise.resolve(ResourceGroupManager.instance);
    }
    async getResourceGroup(name) {
        return ResourceGroupManager.client.resourceGroups.get(name);
    }
    async hasResourceGroup(name) {
        try {
            await this.getResourceGroup(name);
            return Promise.resolve(true);
        }
        catch (_a) {
            return Promise.resolve(false);
        }
    }
    async searchResourceGroups(contain) {
        const groups = await ResourceGroupManager.client.resourceGroups.list();
        return groups.filter(group => { var _a; return (_a = group.name) === null || _a === void 0 ? void 0 : _a.includes(contain); });
    }
    async deleteResourceGroup(name, retryTimes = 5) {
        return new Promise(async (resolve) => {
            for (let i = 0; i < retryTimes; ++i) {
                try {
                    await ResourceGroupManager.client.resourceGroups.deleteMethod(name);
                    return resolve(true);
                }
                catch (e) {
                    await delay(2000);
                    if (i < retryTimes - 1) {
                        console.warn(`[Retry] clean up the Azure resoure group failed with name: ${name}`);
                    }
                }
            }
            return resolve(false);
        });
    }
}
exports.ResourceGroupManager = ResourceGroupManager;
//# sourceMappingURL=resourceGroupManager.js.map