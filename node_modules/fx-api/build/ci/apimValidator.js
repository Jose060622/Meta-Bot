"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimValidator = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const chai = tslib_1.__importStar(require("chai"));
const arm_apimanagement_1 = require("@azure/arm-apimanagement");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const md5_1 = tslib_1.__importDefault(require("md5"));
const arm_resources_1 = require("@azure/arm-resources");
class ApimValidator {
    static async init(subscriptionId, azureAccountProvider, graphTokenProvider) {
        const tokenCredential = await azureAccountProvider.getAccountCredentialAsync();
        this.apimClient = new arm_apimanagement_1.ApiManagementClient(tokenCredential, subscriptionId);
        this.resourceGroupClient = new arm_resources_1.ResourceManagementClient(tokenCredential, subscriptionId);
        const graphToken = await graphTokenProvider.getAccessToken();
        this.axiosInstance = axios_1.default.create({
            baseURL: "https://graph.microsoft.com/v1.0",
            headers: {
                authorization: `Bearer ${graphToken}`,
                "content-type": "application/json",
            },
        });
    }
    static async prepareApiManagementService(resourceGroupName, serviceName) {
        var _a, _b;
        await ((_a = this.resourceGroupClient) === null || _a === void 0 ? void 0 : _a.resourceGroups.createOrUpdate(resourceGroupName, { location: "eastus" }));
        await ((_b = this.apimClient) === null || _b === void 0 ? void 0 : _b.apiManagementService.createOrUpdate(resourceGroupName, serviceName, {
            publisherName: "teamsfx-test@microsoft.com",
            publisherEmail: "teamsfx-test@microsoft.com",
            sku: {
                name: "Consumption",
                capacity: 0,
            },
            location: "eastus",
        }));
    }
    static async validateProvision(ctx, appName, resourceGroupName, serviceName, productId, oAuthServerId) {
        const config = new Config(ctx);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.resourceNameSuffix);
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.apimResourceGroupName, resourceGroupName);
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.apimServiceName, serviceName !== null && serviceName !== void 0 ? serviceName : `${appName}am${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}`);
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.productId, productId !== null && productId !== void 0 ? productId : `${appName}-${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}-product`);
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.oAuthServerId, oAuthServerId !== null && oAuthServerId !== void 0 ? oAuthServerId : `${appName}-${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}-server`);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apimClientAADObjectId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apimClientAADClientId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apimClientAADClientSecret);
        await this.validateApimService(config);
        await this.validateApimOAuthServer(config);
        await this.validateProduct(config);
        await this.validateAppAad(config);
        await this.validateClientAad(config);
    }
    static async validateDeploy(ctx, projectPath, apiPrefix, apiVersion, apiDocumentPath, versionSetId, apiPath) {
        const config = new Config(ctx);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.resourceNameSuffix);
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.apiPrefix, apiPrefix);
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.apiDocumentPath, apiDocumentPath !== null && apiDocumentPath !== void 0 ? apiDocumentPath : "openapi/openapi.json");
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.versionSetId, versionSetId !== null && versionSetId !== void 0 ? versionSetId : md5_1.default(`${apiPrefix}-${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}`));
        chai.assert.equal(config === null || config === void 0 ? void 0 : config.apiPath, apiPath !== null && apiPath !== void 0 ? apiPath : `${apiPrefix}-${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}`);
        await this.validateVersionSet(config);
        await this.validateApi(config, projectPath, apiVersion);
        await this.validateProductApi(config, apiVersion);
    }
    static getApimInfo(config) {
        var _a;
        const resourceGroup = (_a = config === null || config === void 0 ? void 0 : config.apimResourceGroupName) !== null && _a !== void 0 ? _a : config === null || config === void 0 ? void 0 : config.resourceGroupName;
        chai.assert.isNotEmpty(resourceGroup);
        const serviceName = config === null || config === void 0 ? void 0 : config.apimServiceName;
        chai.assert.isNotEmpty(serviceName);
        return { resourceGroup: resourceGroup, serviceName: serviceName };
    }
    static async loadOpenApiSpec(config, projectPath) {
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apiDocumentPath);
        return await fs_extra_1.default.readJson(`${projectPath}/${config === null || config === void 0 ? void 0 : config.apiDocumentPath}`);
    }
    static async validateApimService(config) {
        var _a;
        const apim = this.getApimInfo(config);
        const apimManagementService = await ((_a = this.apimClient) === null || _a === void 0 ? void 0 : _a.apiManagementService.get(apim.resourceGroup, apim.serviceName));
        chai.assert.isNotEmpty(apimManagementService);
        chai.assert.equal(apimManagementService === null || apimManagementService === void 0 ? void 0 : apimManagementService.sku.name, "Consumption");
    }
    static async validateApimOAuthServer(config) {
        var _a, _b;
        const apim = this.getApimInfo(config);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.oAuthServerId);
        const oAuthServer = await ((_b = (_a = this.apimClient) === null || _a === void 0 ? void 0 : _a.authorizationServer) === null || _b === void 0 ? void 0 : _b.get(apim.resourceGroup, apim.serviceName, config === null || config === void 0 ? void 0 : config.oAuthServerId));
        chai.assert.isNotEmpty(oAuthServer);
        chai.assert.isNotEmpty(oAuthServer === null || oAuthServer === void 0 ? void 0 : oAuthServer.displayName);
        chai.assert.equal(oAuthServer === null || oAuthServer === void 0 ? void 0 : oAuthServer.clientId, config === null || config === void 0 ? void 0 : config.apimClientAADClientId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.applicationIdUris);
        chai.assert.equal(oAuthServer === null || oAuthServer === void 0 ? void 0 : oAuthServer.defaultScope, `${config === null || config === void 0 ? void 0 : config.applicationIdUris}/.default`);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.tenantId);
        chai.assert.equal(oAuthServer === null || oAuthServer === void 0 ? void 0 : oAuthServer.authorizationEndpoint, `https://login.microsoftonline.com/${config === null || config === void 0 ? void 0 : config.tenantId}/oauth2/v2.0/authorize`);
        chai.assert.equal(oAuthServer === null || oAuthServer === void 0 ? void 0 : oAuthServer.tokenEndpoint, `https://login.microsoftonline.com/${config === null || config === void 0 ? void 0 : config.tenantId}/oauth2/v2.0/token`);
    }
    static async validateProduct(config) {
        var _a, _b;
        const apim = this.getApimInfo(config);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.productId);
        const product = await ((_b = (_a = this.apimClient) === null || _a === void 0 ? void 0 : _a.product) === null || _b === void 0 ? void 0 : _b.get(apim.resourceGroup, apim.serviceName, config === null || config === void 0 ? void 0 : config.productId));
        chai.assert.isNotEmpty(product);
        chai.assert.isFalse(product === null || product === void 0 ? void 0 : product.subscriptionRequired);
    }
    static async validateVersionSet(config) {
        var _a, _b;
        const apim = this.getApimInfo(config);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.versionSetId);
        const versionSet = await ((_b = (_a = this.apimClient) === null || _a === void 0 ? void 0 : _a.apiVersionSet) === null || _b === void 0 ? void 0 : _b.get(apim.resourceGroup, apim.serviceName, config === null || config === void 0 ? void 0 : config.versionSetId));
        chai.assert.isNotEmpty(versionSet);
    }
    static async validateApi(config, projectPath, apiVersion) {
        var _a, _b, _c, _d, _e;
        const apim = this.getApimInfo(config);
        const spec = await this.loadOpenApiSpec(config, projectPath);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apiPrefix);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.resourceNameSuffix);
        const api = await ((_b = (_a = this.apimClient) === null || _a === void 0 ? void 0 : _a.api) === null || _b === void 0 ? void 0 : _b.get(apim.resourceGroup, apim.serviceName, `${config === null || config === void 0 ? void 0 : config.apiPrefix}-${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}-${apiVersion}`));
        chai.assert.isNotEmpty(api);
        chai.assert.equal(api === null || api === void 0 ? void 0 : api.path, `${config === null || config === void 0 ? void 0 : config.apiPrefix}-${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}`);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.oAuthServerId);
        chai.assert.equal((_d = (_c = api === null || api === void 0 ? void 0 : api.authenticationSettings) === null || _c === void 0 ? void 0 : _c.oAuth2) === null || _d === void 0 ? void 0 : _d.authorizationServerId, `${config === null || config === void 0 ? void 0 : config.oAuthServerId}`);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.versionSetId);
        chai.assert.include(api === null || api === void 0 ? void 0 : api.apiVersionSetId, config === null || config === void 0 ? void 0 : config.versionSetId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.functionEndpoint);
        chai.assert.equal(api === null || api === void 0 ? void 0 : api.serviceUrl, `${config === null || config === void 0 ? void 0 : config.functionEndpoint}/api`);
        chai.assert.equal(api === null || api === void 0 ? void 0 : api.displayName, spec.info.title);
        chai.assert.equal(api === null || api === void 0 ? void 0 : api.apiVersion, apiVersion);
        chai.assert.isFalse(api === null || api === void 0 ? void 0 : api.subscriptionRequired);
        chai.assert.includeMembers((_e = api === null || api === void 0 ? void 0 : api.protocols) !== null && _e !== void 0 ? _e : [], ["https"]);
    }
    static async validateProductApi(config, apiVersion) {
        var _a;
        const apim = this.getApimInfo(config);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.productId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apiPrefix);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.resourceNameSuffix);
        const productApi = await ((_a = this.apimClient) === null || _a === void 0 ? void 0 : _a.productApi.checkEntityExists(apim.resourceGroup, apim.serviceName, config === null || config === void 0 ? void 0 : config.productId, `${config === null || config === void 0 ? void 0 : config.apiPrefix}-${config === null || config === void 0 ? void 0 : config.resourceNameSuffix}-${apiVersion}`));
        chai.assert.isNotEmpty(productApi);
    }
    static async validateClientAad(config) {
        var _a, _b, _c, _d, _e;
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apimClientAADObjectId);
        const response = await ((_a = this.axiosInstance) === null || _a === void 0 ? void 0 : _a.get(`/applications/${config === null || config === void 0 ? void 0 : config.apimClientAADObjectId}`));
        const enableIdTokenIssuance = (_c = (_b = response === null || response === void 0 ? void 0 : response.data) === null || _b === void 0 ? void 0 : _b.web.implicitGrantSettings) === null || _c === void 0 ? void 0 : _c.enableIdTokenIssuance;
        chai.assert.isTrue(enableIdTokenIssuance);
        const passwordCredentials = (_d = response === null || response === void 0 ? void 0 : response.data) === null || _d === void 0 ? void 0 : _d.passwordCredentials;
        chai.assert.isNotEmpty(passwordCredentials);
        const requiredResourceAccess = (_e = response === null || response === void 0 ? void 0 : response.data) === null || _e === void 0 ? void 0 : _e.requiredResourceAccess;
        chai.assert.isNotEmpty(requiredResourceAccess);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.clientId);
        chai.assert.include(requiredResourceAccess.map((x) => x === null || x === void 0 ? void 0 : x.resourceAppId), config === null || config === void 0 ? void 0 : config.clientId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.oauth2PermissionScopeId);
        const resourceAccessObj = requiredResourceAccess.find((x) => (x === null || x === void 0 ? void 0 : x.resourceAppId) === (config === null || config === void 0 ? void 0 : config.clientId));
        chai.assert.deepInclude(resourceAccessObj.resourceAccess, { id: config === null || config === void 0 ? void 0 : config.oauth2PermissionScopeId, type: "Scope" });
    }
    static async validateAppAad(config) {
        var _a, _b, _c, _d, _e;
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.objectId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.apimClientAADClientId);
        const aadResponse = await ((_a = this.axiosInstance) === null || _a === void 0 ? void 0 : _a.get(`/applications/${config === null || config === void 0 ? void 0 : config.objectId}`));
        const knownClientApplications = (_c = (_b = aadResponse === null || aadResponse === void 0 ? void 0 : aadResponse.data) === null || _b === void 0 ? void 0 : _b.api) === null || _c === void 0 ? void 0 : _c.knownClientApplications;
        chai.assert.isNotEmpty(knownClientApplications);
        chai.assert.include(knownClientApplications, config === null || config === void 0 ? void 0 : config.apimClientAADClientId);
        chai.assert.isNotEmpty(config === null || config === void 0 ? void 0 : config.clientId);
        const servicePrincipalResponse = await ((_d = this.axiosInstance) === null || _d === void 0 ? void 0 : _d.get(`/servicePrincipals?$filter=appId eq '${config === null || config === void 0 ? void 0 : config.clientId}'`));
        const servicePrincipals = (_e = servicePrincipalResponse === null || servicePrincipalResponse === void 0 ? void 0 : servicePrincipalResponse.data) === null || _e === void 0 ? void 0 : _e.value;
        chai.assert.isNotEmpty(servicePrincipals);
        chai.assert.include(servicePrincipals.map((sp) => sp.appId), config === null || config === void 0 ? void 0 : config.clientId);
    }
}
exports.ApimValidator = ApimValidator;
class Config {
    constructor(config) {
        this.functionPlugin = "fx-resource-function";
        this.aadPlugin = "fx-resource-aad-app-for-teams";
        this.solution = "solution";
        this.apimPlugin = "fx-resource-apim";
        this.config = config;
    }
    get functionEndpoint() { return this.config[this.functionPlugin]["functionEndpoint"]; }
    get objectId() { return this.config[this.aadPlugin]["objectId"]; }
    get clientId() { return this.config[this.aadPlugin]["clientId"]; }
    get oauth2PermissionScopeId() { return this.config[this.aadPlugin]["oauth2PermissionScopeId"]; }
    get applicationIdUris() { return this.config[this.aadPlugin]["applicationIdUris"]; }
    get subscriptionId() { return this.config[this.solution]["subscriptionId"]; }
    get resourceNameSuffix() { return this.config[this.solution]["resourceNameSuffix"]; }
    get tenantId() { return this.config[this.solution]["tenantId"]; }
    get resourceGroupName() { return this.config[this.solution]["resourceGroupName"]; }
    get location() { return this.config[this.solution]["location"]; }
    get apimResourceGroupName() { return this.config[this.apimPlugin]["resourceGroupName"]; }
    get apimServiceName() { return this.config[this.apimPlugin]["serviceName"]; }
    get productId() { return this.config[this.apimPlugin]["productId"]; }
    get oAuthServerId() { return this.config[this.apimPlugin]["oAuthServerId"]; }
    get apimClientAADObjectId() { return this.config[this.apimPlugin]["apimClientAADObjectId"]; }
    get apimClientAADClientId() { return this.config[this.apimPlugin]["apimClientAADClientId"]; }
    get apimClientAADClientSecret() { return this.config[this.apimPlugin]["apimClientAADClientSecret"]; }
    get apiPrefix() { return this.config[this.apimPlugin]["apiPrefix"]; }
    get versionSetId() { return this.config[this.apimPlugin]["versionSetId"]; }
    get apiPath() { return this.config[this.apimPlugin]["apiPath"]; }
    get apiDocumentPath() { return this.config[this.apimPlugin]["apiDocumentPath"]; }
}
//# sourceMappingURL=apimValidator.js.map