// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockAzureAccountProvider = void 0;
const tslib_1 = require("tslib");
const arm_subscriptions_1 = require("@azure/arm-subscriptions");
const identity = tslib_1.__importStar(require("@azure/identity"));
const msRestNodeAuth = tslib_1.__importStar(require("@azure/ms-rest-nodeauth"));
const arm = tslib_1.__importStar(require("azure-arm-resource"));
const dotenv_1 = tslib_1.__importDefault(require("dotenv"));
const msRestAzure = tslib_1.__importStar(require("ms-rest-azure"));
const error_1 = require("../error");
const azureConfig = tslib_1.__importStar(require("./conf/azure"));
dotenv_1.default.config();
const user = (_a = process.env.TEST_USER_NAME) !== null && _a !== void 0 ? _a : "";
const password = (_b = process.env.TEST_USER_PASSWORD) !== null && _b !== void 0 ? _b : "";
class MockAzureAccountProvider {
    /**
     * Gets instance
     * @returns instance
     */
    static getInstance() {
        if (!MockAzureAccountProvider.instance) {
            MockAzureAccountProvider.instance = new MockAzureAccountProvider();
        }
        return MockAzureAccountProvider.instance;
    }
    /**
     * Get ms-rest-* [credential](https://github.com/Azure/ms-rest-nodeauth/blob/master/lib/credentials/tokenCredentialsBase.ts)
     */
    getAccountCredential() {
        return MockAzureAccountProvider.tokenCredentialsBase;
    }
    /**
     * Get identity [crendential](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/core/core-auth/src/tokenCredential.ts)
     */
    getIdentityCredential() {
        return MockAzureAccountProvider.tokenCredential;
    }
    async getAccountCredentialAsync() {
        if (MockAzureAccountProvider.tokenCredentialsBase == undefined) {
            const authres = await msRestNodeAuth.loginWithUsernamePassword(user, password);
            MockAzureAccountProvider.tokenCredentialsBase = authres;
        }
        return new Promise((resolve) => {
            resolve(MockAzureAccountProvider.tokenCredentialsBase);
        });
    }
    async getIdentityCredentialAsync() {
        if (MockAzureAccountProvider.tokenCredential == undefined) {
            const identityCredential = new identity.UsernamePasswordCredential(azureConfig.tenant.id, "04b07795-8ddb-461a-bbee-02f9e1bf7b46", user, password);
            const credentialChain = new identity.ChainedTokenCredential(identityCredential);
            MockAzureAccountProvider.tokenCredential = credentialChain;
        }
        return new Promise((resolve) => {
            resolve(MockAzureAccountProvider.tokenCredential);
        });
    }
    async signout() {
        return new Promise((resolve) => {
            resolve(true);
        });
    }
    async setStatusChangeCallback(statusChange) {
        return new Promise((resolve) => {
            resolve(true);
        });
    }
    async deleteResourceGroup(rg) {
        if (!this.client) {
            const c = await msRestAzure.loginWithUsernamePassword(user, password);
            this.client = new arm.ResourceManagementClient(c, azureConfig.subscription.id);
        }
        this.client.resourceGroups.deleteMethod(rg, function (err, result, request, response) {
            if (err) {
                console.log(err);
            }
            else {
                console.log(result);
            }
        });
    }
    setStatusChangeMap(name, statusChange) {
        throw new Error("Method not implemented.");
    }
    removeStatusChangeMap(name) {
        throw new Error("Method not implemented.");
    }
    getJsonObject(showDialog) {
        throw new Error("Method not implemented.");
    }
    async listSubscriptions() {
        const credential = await this.getAccountCredentialAsync();
        if (credential) {
            const client = new arm_subscriptions_1.SubscriptionClient(credential);
            const subscriptions = await listAll(client.subscriptions, client.subscriptions.list());
            const filteredsubs = subscriptions.filter(sub => !!sub.displayName && !!sub.subscriptionId);
            return filteredsubs.map(sub => {
                return { subscriptionName: sub.displayName, subscriptionId: sub.subscriptionId, tenantId: "undefined" };
            });
        }
        return [];
    }
    async setSubscription(subscriptionId) {
        const list = await this.listSubscriptions();
        for (let i = 0; i < list.length; ++i) {
            const item = list[i];
            if (item.subscriptionId == subscriptionId) {
                return;
            }
        }
        throw error_1.returnUserError(new Error(`Inputed subscription not found in your tenant`), "CI", "NotFoundSubscriptionId");
    }
}
exports.MockAzureAccountProvider = MockAzureAccountProvider;
// Copied from https://github.com/microsoft/vscode-azure-account/blob/2b3c1a8e81e237580465cc9a1f4da5caa34644a6/sample/src/extension.ts
// to list all subscriptions
async function listAll(client, first) {
    const all = [];
    for (let list = await first; list.length || list.nextLink; list = list.nextLink ? await client.listNext(list.nextLink) : []) {
        all.push(...list);
    }
    return all;
}
exports.default = MockAzureAccountProvider.getInstance();
//# sourceMappingURL=mockAzureAccountProvider.js.map