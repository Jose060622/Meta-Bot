import { OptionItem } from "./qm";
import { Platform, VsCodeEnv } from "./constants";
import { AnswerValue } from "./qm";
export declare type ConfigValue = string | string[] | number | number[] | boolean | boolean[] | OptionItem[] | OptionItem | undefined | unknown;
export declare type PluginIdentity = string;
export declare type PluginConfig = ConfigMap;
export declare type ReadonlyPluginConfig = ReadonlyMap<string, ConfigValue>;
export declare type SolutionConfig = Map<PluginIdentity, PluginConfig>;
export declare type ReadonlySolutionConfig = ReadonlyMap<PluginIdentity, ReadonlyPluginConfig>;
export declare class ConfigMap extends Map<string, ConfigValue> {
    getString(k: string, defaultValue?: string): string | undefined;
    getBoolean(k: string, defaultValue?: boolean): boolean | undefined;
    getNumber(k: string, defaultValue?: number): number | undefined;
    getStringArray(k: string, defaultValue?: string[]): string[] | undefined;
    getNumberArray(k: string, defaultValue?: number[]): number[] | undefined;
    getBooleanArray(k: string, defaultValue?: boolean[]): boolean[] | undefined;
    getOptionItem(k: string, defaultValue?: OptionItem): OptionItem | undefined;
    getOptionItemArray(k: string, defaultValue?: OptionItem[]): OptionItem[] | undefined;
    toJSON(): Dict<unknown>;
    static fromJSON(obj?: Dict<unknown>): ConfigMap | undefined;
    constructor(entries?: readonly (readonly [string, ConfigValue])[] | null);
}
export declare type Void = {};
export declare const Void: {};
export interface Dict<T> {
    [key: string]: T | undefined;
}
export declare type ResourceTemplate = Dict<ConfigValue>;
export declare type ResourceTemplates = {
    [k: string]: ResourceTemplate | undefined;
};
export declare type ResourceConfig = ResourceTemplate;
export declare type ResourceConfigs = ResourceTemplates;
export declare type ReadonlyResourceConfig = Readonly<ResourceConfig>;
export declare type ReadonlyResourceConfigs = Readonly<{
    [k: string]: ReadonlyResourceConfig | undefined;
}>;
/**
 * environment meta data
 */
export interface EnvMeta {
    name: string;
    local: boolean;
    sideloading: boolean;
}
export declare type EnvConfig = Dict<string>;
/**
 * project static settings
 */
export interface ProjectSettings {
    appName: string;
    solutionSettings?: SolutionSettings;
}
/**
 * solution settings
 */
export interface SolutionSettings extends Dict<ConfigValue> {
    name: string;
    version: string;
}
export interface AzureSolutionSettings extends SolutionSettings {
    hostType: string;
    capabilities: string[];
    azureResources: string[];
    activeResourcePlugins: string[];
}
/**
 * project dynamic states
 */
export interface ProjectStates {
    solution: Dict<ConfigValue>;
    resources: {
        [k: string]: Dict<ConfigValue>;
    };
}
export interface Inputs extends Dict<AnswerValue> {
    platform: Platform;
    vscodeEnv?: VsCodeEnv;
}
export interface Json {
    [k: string]: unknown;
}
//# sourceMappingURL=config.d.ts.map